<?php

namespace UJM\ExoBundle\Repository;

use Claroline\CoreBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use UJM\ExoBundle\Entity\Exercise;
use UJM\ExoBundle\Entity\Question\Hint;
use UJM\ExoBundle\Entity\Attempt\Paper;

/**
 * PaperRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PaperRepository extends EntityRepository
{
    /**
     * Returns the unfinished papers of a user for a given exercise, if any.
     *
     * @param User     $user
     * @param Exercise $exercise
     *
     * @return Paper[]
     */
    public function findUnfinishedPapers(User $user, Exercise $exercise)
    {
        return $this->createQueryBuilder('p')
            ->join('p.user', 'u')
            ->join('p.exercise', 'e')
            ->where('u = :user')
            ->andWhere('e = :exercise')
            ->andWhere('p.end IS NULL')
            ->orderBy('p.start', 'DESC')
            ->setParameters(['user' => $user, 'exercise' => $exercise])
            ->getQuery()
            ->getResult();
    }

    /**
     * Finds the score of a paper by adding the score of each answer.
     *
     * @param Paper $paper
     *
     * @return float
     */
    public function findScore(Paper $paper)
    {
        return $this->getEntityManager()
            ->createQuery('
                SELECT SUM(r.mark) FROM UJM\ExoBundle\Entity\Attempt\Answer AS r
                WHERE r.paper= :paper
                  AND r.mark != -1
            ')
            ->setParameters(['paper' => $paper])
            ->getSingleScalarResult();
    }

    /**
     * Checks that all the answers of a Paper have been marked.
     *
     * @param Paper $paper
     *
     * @return bool
     */
    public function isFullyEvaluated(Paper $paper)
    {
        return 0 === $this->getEntityManager()
            ->createQuery('
                SELECT COUNT(r) FROM UJM\ExoBundle\Entity\Attempt\Answer AS r
                WHERE r.paper= :paper
                  AND r.mark = -1
            ')
            ->setParameters(['paper' => $paper])
            ->getSingleScalarResult();
    }

    /**
     * Returns the number of papers for an exercise.
     *
     * @param Exercise $exercise
     *
     * @return int the number of exercise papers
     */
    public function countExercisePapers(Exercise $exercise)
    {
        return $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->join('p.exercise', 'e')
            ->where('e = :exercise')
            ->setParameters(['exercise' => $exercise])
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Count the number of finished paper for a user and an exercise.
     *
     * @param Exercise $exercise
     * @param User     $user
     *
     * @return int the number of finished papers
     */
    public function countUserFinishedPapers(Exercise $exercise, User $user)
    {
        return $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->join('p.exercise', 'e')
            ->join('p.user', 'u')
            ->where('u = :user')
            ->andWhere('e = :exercise')
            ->andWhere('p.end IS NOT NULL')
            ->setParameters(['user' => $user, 'exercise' => $exercise])
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * Returns whether a hint is related to a paper.
     *
     * @param Paper $paper
     * @param Hint  $hint
     *
     * @return bool
     */
    public function hasHint(Paper $paper, Hint $hint)
    {
        $count = $this->createQueryBuilder('p')
            ->select('COUNT(p)')
            ->join('p.exercise', 'e')
            ->join('e.steps', 's')
            ->join('s.stepQuestions', 'sq')
            ->where('e = :exercise')
            ->andWhere('sq.question = :question')
            ->setParameters(['question' => $hint->getQuestion(), 'exercise' => $paper->getExercise()])
            ->getQuery()
            ->getSingleScalarResult();

        return 0 < $count;
    }
}
